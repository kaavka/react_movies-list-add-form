{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","utils/validateUrls.ts","components/TextField/TextField.tsx","utils/getRandomDigits.ts","components/TextField/consts.ts","components/NewMovie/consts.ts","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","pattern","validateUrls","value","test","TextField","name","label","placeholder","required","error","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","errorMessage","htmlFor","type","classNames","onBlur","DEFAULT_VALUE_FOR_INPUT","NewMovie","onAdd","formData","setFormData","count","setCount","handleOnChange","event","target","prevState","isImdbUrlValid","isImgUrlValid","isSubmitDisabled","onSubmit","preventDefault","disabled","App","moviesFromServer","moviesList","setMoviesList","ReactDOM","render","document","getElementById"],"mappings":"yuEAQaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,sBAAKC,UAAU,OAAO,UAAQ,aAA9B,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BD,EAAMK,aAIrC,sBAAKJ,UAAU,UAAf,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAf,0BA5BkC,ECE7BC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,qBAAKT,UAAU,SAAf,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMY,OAFE,KAFsB,E,8BCP3C,IAAMC,EAAU,uKAEHC,EAAmC,SAACC,GAC/C,OAAOF,EAAQG,KAAKD,EACrB,ECWYE,EAA6B,SAAC,GAQpC,IAPLC,EAOI,EAPJA,KACAH,EAMI,EANJA,MAMI,IALJI,aAKI,MALID,EAKJ,MAJJE,mBAII,sBAJmBD,GAInB,MAHJE,gBAGI,SAFJC,EAEI,EAFJA,MAEI,IADJC,gBACI,MADO,WAAQ,EACf,EACJ,EAAaC,oBAAS,2BAASN,EAAT,YC1BfO,KAAKC,SACTC,QAAQ,IACRC,MAAM,GDwBa,IAAfC,EAAP,oBACA,EAA8BL,oBAAS,GAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KACMC,EAAWF,IAAaT,IAAaN,GAAUO,GAC/CW,EAAY,UAAMd,EAAN,YAAgBE,IAAaN,EE9BJ,cACD,aFiC1C,OACE,sBAAKd,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQiC,QAASL,EAAlC,SACGV,IAGH,qBAAKlB,UAAU,UAAf,SACE,uBACEiB,KAAMA,EACNiB,KAAK,OACLN,GAAIA,EACJ,0BAAkBX,GAClBjB,UAAWmC,IAAW,QAAS,CAC7B,YAAaJ,IAEfZ,YAAaA,EACbL,MAAOA,EACPQ,SAAUA,EACVc,OAAQ,kBAAMN,GAAW,EAAjB,MAIXC,GACC,mBAAG/B,UAAU,iBAAb,SACGgC,MAKV,EG/DYK,EAA0B,GCU1BC,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1C,EAAgChB,mBAAS,CACvCnB,MAAOiC,EACPhC,YAAagC,EACbnC,OAAQmC,EACR9B,QAAS8B,EACT1B,OAAQ0B,IALV,mBAAOG,EAAP,KAAiBC,EAAjB,KAOA,EAA0BlB,mBAAS,GAAnC,mBAAOmB,EAAP,KAAcC,EAAd,KAYA,IAQMC,EAAiB,SAACC,GACtB,MAAwBA,EAAMC,OAAtB7B,EAAR,EAAQA,KAAMH,EAAd,EAAcA,MAEd2B,GAAY,SAACM,GAAD,mBAAC,eACRA,GADO,kBAET9B,EAAOH,GAFE,GAIb,EAEKkC,EAAiBnC,EAAa2B,EAASjC,SACvC0C,EAAgBpC,EAAa2B,EAAStC,QACtCgD,GACHV,EAASpC,QACNoC,EAAS7B,SACTqC,IACAC,EAGN,OACE,uBACEjD,UAAU,WAEVmD,SA9BmB,SAACN,GACtBA,EAAMO,iBAENT,GAAS,SAAAI,GAAS,OAAIA,EAAY,CAAhB,IAClBR,EAAMC,GAbNC,EAAY,CACVrC,MAAOiC,EACPhC,YAAagC,EACbnC,OAAQmC,EACR9B,QAAS8B,EACT1B,OAAQ0B,GAUX,EAqBC,UAKE,oBAAIrC,UAAU,QAAd,yBAEA,cAAC,EAAD,CACEiB,KAAK,QACLC,MAAM,QACNJ,MAAO0B,EAASpC,MAChBkB,SAAUsB,EACVxB,UAAQ,IAGV,cAAC,EAAD,CACEH,KAAK,cACLC,MAAM,cACNJ,MAAO0B,EAASnC,YAChBiB,SAAUsB,IAGZ,cAAC,EAAD,CACE3B,KAAK,SACLC,MAAM,YACNJ,MAAO0B,EAAStC,OAChBoB,SAAUsB,EACVvB,OAAQ4B,EACR7B,UAAQ,IAGV,cAAC,EAAD,CACEH,KAAK,UACLC,MAAM,WACNJ,MAAO0B,EAASjC,QAChBe,SAAUsB,EACVvB,OAAQ2B,EACR5B,UAAQ,IAGV,cAAC,EAAD,CACEH,KAAK,SACLC,MAAM,UACNJ,MAAO0B,EAAS7B,OAChBW,SAAUsB,EACVxB,UAAQ,IAGV,qBAAKpB,UAAU,mBAAf,SACE,qBAAKA,UAAU,UAAf,SACE,wBACEkC,KAAK,SACL,UAAQ,gBACRlC,UAAU,iBACVqD,SAAUH,EAJZ,uBAhDCR,EA4DV,E,QC/GYY,EAAM,WACjB,MAAoC/B,mBAASgC,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KASA,OACE,sBAAKzD,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQ+C,MAEtB,qBAAKxD,UAAU,UAAf,SACE,cAAC,EAAD,CAAUuC,MAbI,SAACxC,GACnB0D,GAAc,SAACV,GAAD,4BACTA,GADS,CAEZhD,GAFY,GAIf,QAYF,ECxBD2D,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,Q","file":"static/js/main.533998e0.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { ValidationCallback } from '../types';\n\n// eslint-disable-next-line max-len\nconst pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\nexport const validateUrls: ValidationCallback = (value) => {\n  return pattern.test(value);\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { getRandomDigits } from '../../utils';\nimport {\n  ERROR_MESSAGE_FOR_EMPTY_INPUT,\n  ERROR_MESSAGE_FOR_VALIDATION,\n} from './consts';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  error?: boolean,\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void,\n};\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  error,\n  onChange = () => {},\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && ((required && !value) || error);\n  const errorMessage = `${label} ${(required && !value\n    ? ERROR_MESSAGE_FOR_EMPTY_INPUT\n    : ERROR_MESSAGE_FOR_VALIDATION)}`;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          name={name}\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={onChange}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">\n          {errorMessage}\n        </p>\n      )}\n    </div>\n  );\n};\n","export function getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n","export const ERROR_MESSAGE_FOR_EMPTY_INPUT = 'is required';\nexport const ERROR_MESSAGE_FOR_VALIDATION = 'not valid';\n","export const DEFAULT_VALUE_FOR_INPUT = '';\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types';\nimport { validateUrls } from '../../utils';\nimport { DEFAULT_VALUE_FOR_INPUT } from './consts';\n\ninterface Props {\n  onAdd: (movie: Movie) => void\n}\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [formData, setFormData] = useState({\n    title: DEFAULT_VALUE_FOR_INPUT,\n    description: DEFAULT_VALUE_FOR_INPUT,\n    imgUrl: DEFAULT_VALUE_FOR_INPUT,\n    imdbUrl: DEFAULT_VALUE_FOR_INPUT,\n    imdbId: DEFAULT_VALUE_FOR_INPUT,\n  });\n  const [count, setCount] = useState(0);\n\n  function resetFormInputs() {\n    setFormData({\n      title: DEFAULT_VALUE_FOR_INPUT,\n      description: DEFAULT_VALUE_FOR_INPUT,\n      imgUrl: DEFAULT_VALUE_FOR_INPUT,\n      imdbUrl: DEFAULT_VALUE_FOR_INPUT,\n      imdbId: DEFAULT_VALUE_FOR_INPUT,\n    });\n  }\n\n  const handleOnSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setCount(prevState => prevState + 1);\n    onAdd(formData);\n    resetFormInputs();\n  };\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    setFormData((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const isImdbUrlValid = validateUrls(formData.imdbUrl);\n  const isImgUrlValid = validateUrls(formData.imgUrl);\n  const isSubmitDisabled = (\n    !formData.title\n    || !formData.imdbId\n    || !isImdbUrlValid\n    || !isImgUrlValid\n  );\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleOnSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={formData.title}\n        onChange={handleOnChange}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={formData.description}\n        onChange={handleOnChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={formData.imgUrl}\n        onChange={handleOnChange}\n        error={!isImgUrlValid}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={formData.imdbUrl}\n        onChange={handleOnChange}\n        error={!isImdbUrlValid}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={formData.imdbId}\n        onChange={handleOnChange}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isSubmitDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\n\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [moviesList, setMoviesList] = useState(moviesFromServer);\n\n  const handleOnAdd = (movie: Movie): void => {\n    setMoviesList((prevState) => ([\n      ...prevState,\n      movie,\n    ]));\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={moviesList} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={handleOnAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}